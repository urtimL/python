"""
Задача 26:  Напишите программу, которая на вход принимает два числа A и B, и возводит число А в целую степень B с помощью рекурсии.

*Пример:*

A = 3; B = 5 -> 243 (3⁵)
    A = 2; B = 3 -> 8 

"""

# def Exponentiation(a, b):
#     if b == 1:
#         return a
#     return a * Exponentiation(a, b - 1)

# A = int(input("введите число "))
# B = int(input("введите степень "))

# print(Exponentiation(A, B))

"""
Задача 28: Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел. Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы.

*Пример:*

2 2
    4 
"""

# def sum(a, b):
#     if b == 0:
#         return a
#     return sum(a, b - 1) + 1

# A = int(input("введите первое число: "))
# B = int(input("введите второе число: "))

# print(sum(A, B))

"""
39. Даны два массива чисел. Требуется вывести те элементы первого массива (в том порядке, в каком они идут в первом массиве), которых нет во втором массиве. Пользователь вводит число N - количество элементов в первом массиве, затем N чисел - элементы массива. Затем число M - количество элементов во втором массиве. Затем элементы второго массива



nList = list()
N = int(input("введите число N: "))
for i in range(N):
    nList.append(int(input(f"введите {i}-e число: ")))

mList = list()
M = int(input("введите число N: "))
for i in range(M):
    mList.append(int(input(f"введите {i}-e число: ")))

for i in nList:
    if not(i in mList):
        print(i, end = ", ")

"""
"""
Дан массив, состоящий из целых чисел. Напишите программу, которая в данном массиве определит количество элементов, у которых два соседних и, при этом, оба соседних элемента меньше данного. Сначала вводится число N — количество элементов в массиве Далее записаны N чисел — элементы массива. Массив состоит из целых чисел.
"""


"""
Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать. 
Вводится список чисел. Все числа списка находятся на разных строках.

list_1 = [1, 2, 3, 2, 3]
count = 0
for i in range(len(list_1)):
    for j in range(i + 1, len(list_1)):
        if i != j and list_1[i] == list_1[j]:
            count += 1
print(count)


def random_list(N: int, min=-100, max=100) -> list:
    import random
    arr = []
    for i in range(N):
        arr.append(random.randint(min, max))
    return arr


if __name__ == "__main__":
    count = int(input("Введите длину списка: "))
    arr = random_list(count, 0, 10)
    print(arr)
    print(_res(arr))

Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. Например, 220 и 284 – дружественные числа. По данному числу k выведите все пары дружественных чисел, каждое из которых не превосходит k. Программа получает на вход одно натуральное число k, не превосходящее 105. Программа должна вывести  все пары дружественных чисел, каждое из которых не превосходит k. Пары необходимо выводить по одной в строке, разделяя пробелами. Каждая пара должна быть выведена только один раз (перестановка чисел новую пару не дает).


def sum_of_divisors(n):
    
    Функция для подсчета суммы делителей числа n
    
    divisors_sum = 0
    for i in range(1, n):
        if n % i == 0:
            divisors_sum += i
    return divisors_sum

k = int(input())

for n in range(1, k):
    m = sum_of_divisors(n)
    if n < m <= k and sum_of_divisors(m) == n:
        print(n, m)

d = [1, 2, [True, False], ["Москва", "Уфа", [100, 101], ['True', [-2, -1]]], 7.89]
С помощью рекурсивной функции get_line_list создать на его основе одномерный список из значений элементов списка d. Функция должна возвращать новый созданный одномерный список.
"""
d = [1, 2, [True, False], ["Москва", "Уфа", [100, 101], ['True', [-2, -1]]], 7.89]
newD = list()

def get_line_list(k, nList):
    if type(k) == list:
        for i in k:
            #print(k)
            get_line_list(i, nList)
    else:
        return nList.append(k)

for i in d:
    #print(i)
    get_line_list(i, newD)

print(d)
#get_line_list(d, newD)
print(newD)

